@page "/book/create"
@using BookData.Request.BookRequest
@using Microsoft.AspNetCore.Components.Forms
<h3 class="d-flex justify-content-center align-items-center mt-3">Tạo Sách Mới</h3>

<EditForm Model="Book" OnValidSubmit="HandleSubmit" enctype="multipart/form-data" class="ms-5">
   <div class="row">
        <div class="mb-3 col-3">
            <label for="Name" class="form-label">Tên Sách</label>
            <InputText class="form-control" @bind-Value="Book.BookName"></InputText>
        </div>
        <div class="mb-3 col-3">
            <label for="BookPrices" class="form-label">Giá</label>
            <InputNumber class="form-control" @bind-Value="Book.BookPrices" />
        </div>
        <div class=" col-3" style="margin-top:30px">
            <InputFile OnChange="@OnInputFileChange" accept="image/*" maxFileSize="5242880"></InputFile>
        </div>
   </div>
   <div class="row">
        <div class="mb-3 col-3">
            <label for="Stock" class="form-label">Số Lượng</label>
            <InputNumber class="form-control" @bind-Value="Book.Stock" />
        </div>
        <div class="mb-3 col-3">
            <label for="PublicationYear" class="form-label">Ngày Xuất Bản</label>
            <InputDate class="form-control" @bind-Value="Book.PublicationYear"></InputDate>
        </div>
        <div class="col-3" style="margin-top:28px">
            <button type="submit" class="btn btn-primary">Tạo Sách</button>
        </div>
       
   </div>

  <div class="row">
        <!-- Dropdown chọn Tác Giả -->
        <div class="mb-3 position-relative col-3">
            <label for="author-select">Tác Giả</label>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown1">
                    @selectedAuthorsDisplay
                </button>
                <div class="dropdown-menu show" style="display:@(isDropdownOpen1 ? "block" : "none"); max-height: 200px; overflow-y: auto;">
                    @if (Authors == null)
                    {
                        <label>Loading...</label>
                    }
                    else
                    {
                        @foreach (var item in Authors)
                        {
                            <div class="dropdown-item" @onclick="() => { ToggleAuthor(item.AuthorId); }">
                                <input type="checkbox" checked="@Book.AuthorIds.Contains(item.AuthorId)" />
                                <span class="ms-2">@item.AuthorName</span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Dropdown chọn Thể Loại -->
        <div class="mb-3 position-relative col-3">
            <label for="genre-select">Thể Loại</label>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown2">
                    @selectedGenresDisplay
                </button>
                <div class="dropdown-menu show" style="display:@(isDropdownOpen2 ? "block" : "none"); max-height: 200px; overflow-y: auto;">
                    @if (Genres == null)
                    {
                        <label>Loading...</label>
                    }
                    else
                    {
                        @foreach (var item in Genres)
                        {
                            <div class="dropdown-item" @onclick="() => { ToogleGenre(item.Id); }">
                                <input type="checkbox" checked="@Book.GenreIds.Contains(item.Id)" />
                                <span class="ms-2">@item.GenreName</span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
  </div>

    <!-- Upload Ảnh -->
    

   
</EditForm>

@code {


    private BookCreateRequest Book = new BookCreateRequest
        {
            AuthorIds = new List<Guid>(),
            GenreIds = new List<Guid>()
        };


    private bool isDropdownOpen1 = false;
    private bool isDropdownOpen2 = false;
    private string selectedAuthorsDisplay => Book.AuthorIds.Count == 0 ? "Chọn Tác giả"
        : string.Join(", ", Authors.Where(a => Book.AuthorIds.Contains(a.AuthorId)).Select(a => a.AuthorName));
    private string selectedGenresDisplay => Book.GenreIds.Count == 0 ? "Chọn Thể loại"
        : string.Join(", ", Genres.Where(g => Book.GenreIds.Contains(g.Id)).Select(g => g.GenreName));

    private long maxFileSize = 5242880; // 5MB



    // private async Task HandleSubmit()
    // {
    //     // if (imageFile != null)
    //     // {
    //     //     using var stream = new MemoryStream();
    //     //     await imageFile.OpenReadStream(maxFileSize).CopyToAsync(stream);
    //     //     Book.ImgFile = stream.ToArray();
    //     // }

    //     await bookApiClient.CreateBook(Book);
    // }

    private void ToggleDropdown1() => isDropdownOpen1 = !isDropdownOpen1;

    private void ToggleDropdown2() => isDropdownOpen2 = !isDropdownOpen2;

    private void ToggleAuthor(Guid authorId)
    {
        if (Book.AuthorIds.Contains(authorId))
            Book.AuthorIds.Remove(authorId);
        else
            Book.AuthorIds.Add(authorId);
    }

    private void ToogleGenre(Guid genreId)
    {
        if (Book.GenreIds.Contains(genreId))
            Book.GenreIds.Remove(genreId);
        else
            Book.GenreIds.Add(genreId);
    }

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        fileName = imageFile.Name;
    }
}
