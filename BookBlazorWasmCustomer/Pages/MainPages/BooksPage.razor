@page "/books"
@using BookBlazorWasmCustomer.Services
@using BookData.ViewModels
<div class="row" style="height: 400px; background-color: #FCEBE6; display: flex; justify-content: center; align-items: center;">
    <div class="col-4" style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
        <div class="row"><h1>Books</h1></div>
        <div class="row"><p>Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit</p></div>
    </div>
</div>
<div class="row" style="height:600px; display: flex; justify-content: center; align-items: center;">
    <div style="height:600px; width: 80%; display: flex; justify-content: center; align-items: center;">
        @if (Books == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div style="text-align: center;">
                <ul style="list-style-type: none; padding: 0; margin: 0; display: flex; gap: 10px; justify-content: center;">
                    @foreach (var item in Books)
                    {
                        <li class="mx-2">
                            <div class="card border-0" style="width: 18rem;">                           
                                <div class="card-body">
                                    <img src="@item.UrlImage" alt="Book Image" width="200px" height="300px" />
                                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                                    <button class="btn btn-primary" @onclick="() => AddToCart(item.BookId)">Buy</button>
                                </div>
                            </div>
                            
                        </li>
                    }
                </ul>

                <div style="margin-top: 20px;">
                    <button class="btn btn-info" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
                    <button class="btn btn-info" @onclick="NextPage">Next</button>
                </div>
            </div>
        }
    </div>


</div>

@inject IBookApiClient _bookApiClient ;
@inject IJSRuntime JSRuntime
@inject NavigationManager nav
@code{
    private List<Guid> BookEntryIds { get; set; }
    private List<BookVM> Books;
    private int _currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }


    private async Task LoadBooks()
    {
        Books = await _bookApiClient.getAllBook(_currentPage);
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadBooks();
        }
    }

    private async Task NextPage()
    {
        _currentPage++;
        await LoadBooks();
    }
    private async Task AddToCart(Guid bookId)
    {
        // Lưu vào SessionStorage
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "BookEntryIds", bookId.ToString());
        nav.NavigateTo($"/shoppingcart/{bookId}");
    }
}